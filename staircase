import bpy

def draw_cuboid(center,length,breadth,height):
    #center meaning center of base only
    _x=center[0]
    _y=center[1]
    _z=center[2]
    vertices=[(_x+length/2,_y+breadth/2,_z),(_x+length/2,_y-breadth/2,_z),(_x-length/2,_y-breadth/2,_z),(_x-length/2,_y+breadth/2,_z),(_x+length/2,_y+breadth/2,_z+height),(_x+length/2,_y-breadth/2,_z+height),(_x-length/2,_y-breadth/2,_z+height),(_x-length/2,_y+breadth/2,_z+height)]
    edges=[]
    faces=[(0,1,2,3),(4,5,6,7),(0,4,7,3),(0,1,5,4),(1,2,6,5),(7,6,2,3)]
    new_mesh=bpy.data.meshes.new("new_mesh")
    new_mesh.from_pydata(vertices, edges, faces)
    new_mesh.update()
    #make object from the mesh
    new_object = bpy.data.objects.new("new_object", new_mesh)
    view_layer=bpy.context.view_layer
    view_layer.active_layer_collection.collection.objects.link(new_object)
    return new_object

bl_info = {
    "name": "Staircase",
    "category": "Object",
}

class ObjectCursorArray(bpy.types.Operator):
    bl_idname = "object.cursor_array"
    bl_label = "Cursor Array"
    bl_options = {'REGISTER', 'UNDO'}

    tread: bpy.props.IntProperty(name="tread", default=10, min=8, max=16)
    riser: bpy.props.IntProperty(name="riser", default=6, min=5, max=9)
    landing:bpy.props.IntProperty(name="landing", default=39, min=36, max=100)
    
    def execute(self, context):
        
        for i in range(0,5):
            obj=draw_cuboid((0 +i*self.tread,0,0+i*self.riser),self.tread,self.landing,self.riser)   
       
        return {'FINISHED'}

def menu_func(self, context):
    self.layout.operator(ObjectCursorArray.bl_idname)

# store keymaps here to access after registration
addon_keymaps = []


def register():
    bpy.utils.register_class(ObjectCursorArray)
    bpy.types.VIEW3D_MT_object.append(menu_func)

    # handle the keymap
    wm = bpy.context.window_manager
    # Note that in background mode (no GUI available), keyconfigs are not available either,
    # so we have to check this to avoid nasty errors in background case.
    kc = wm.keyconfigs.addon
    if kc:
        km = wm.keyconfigs.addon.keymaps.new(name='Object Mode', space_type='EMPTY')
        kmi = km.keymap_items.new(ObjectCursorArray.bl_idname, 'T', 'PRESS', ctrl=True, shift=True)
        addon_keymaps.append((km, kmi))

def unregister():
    # Note: when unregistering, it's usually good practice to do it in reverse order you registered.
    # Can avoid strange issues like keymap still referring to operators already unregistered...
    # handle the keymap
    for km, kmi in addon_keymaps:
        km.keymap_items.remove(kmi)
    addon_keymaps.clear()

    bpy.utils.unregister_class(ObjectCursorArray)
    bpy.types.VIEW3D_MT_object.remove(menu_func)


if __name__ == "__main__":
    register()
